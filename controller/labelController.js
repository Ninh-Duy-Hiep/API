const Label = require("../models/Label");
const FavoriteLabel = require("../models/Favorite_Label");
const FavoriteMedicine = require("../models/Favorite_Medicine");
const FavoriteDisease = require("../models/Favorite_Disease");
const Disease = require("../models/Disease");
const Medicine = require("../models/Medicine");

// Th√™m nh√£n m·ªõi
const createLabel = async (req, res) => {
  const { user_id, name, color } = req.body;

  if (!user_id || !name) {
    return res
      .status(400)
      .json({ success: false, message: "Thi·∫øu user_id ho·∫∑c t√™n nh√£n" });
  }

  try {
    const newLabel = await Label.create({ user_id, name, color });
    res
      .status(201)
      .json({ success: true, message: "T·∫°o nh√£n th√†nh c√¥ng", data: newLabel });
  } catch (err) {
    console.error("L·ªói khi t·∫°o nh√£n:", err);
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi t·∫°o nh√£n", error: err });
  }
};

// L·∫•y danh s√°ch nh√£n c·ªßa ng∆∞·ªùi d√πng
const getLabels = async (req, res) => {
  const { user_id } = req.query;

  if (!user_id) {
    return res.status(400).json({ success: false, message: "Thi·∫øu user_id" });
  }

  try {
    const labels = await Label.findAll({ where: { user_id } });
    res.status(200).json({ success: true, data: labels });
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch nh√£n:", err);
    res
      .status(500)
      .json({
        success: false,
        message: "L·ªói khi l·∫•y danh s√°ch nh√£n",
        error: err,
      });
  }
};

// C·∫≠p nh·∫≠t nh√£n
const updateLabel = async (req, res) => {
  const { id, name, color } = req.body;

  if (!id || (!name && !color)) {
    return res
      .status(400)
      .json({ success: false, message: "Thi·∫øu id ho·∫∑c d·ªØ li·ªáu c·∫≠p nh·∫≠t" });
  }

  try {
    const label = await Label.findByPk(id);
    if (!label) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y nh√£n" });
    }

    if (name) label.name = name;
    if (color) label.color = color;
    await label.save();

    res
      .status(200)
      .json({
        success: true,
        message: "C·∫≠p nh·∫≠t nh√£n th√†nh c√¥ng",
        data: label,
      });
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t nh√£n:", err);
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi c·∫≠p nh·∫≠t nh√£n", error: err });
  }
};

// X√≥a nh√£n
const deleteLabel = async (req, res) => {
  const { id } = req.params;

  try {
    const label = await Label.findByPk(id);
    if (!label) {
      return res
        .status(404)
        .json({ success: false, message: "Kh√¥ng t√¨m th·∫•y nh√£n" });
    }

    await label.destroy();
    res.status(200).json({ success: true, message: "X√≥a nh√£n th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi x√≥a nh√£n:", err);
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi x√≥a nh√£n", error: err });
  }
};

// g√°n nh√£n
const assignLabel = async (req, res) => {
  const { user_id, label_id, favorite_disease_id, favorite_medicine_id } =
    req.body;

  console.log("üì© D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", req.body);

  if (!user_id || !label_id) {
    console.log("‚ùå L·ªñI: Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!");
    return res
      .status(400)
      .json({ success: false, message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
  }

  try {
    let actualFavoriteMedicineId = null;
    let actualFavoriteDiseaseId = null;

    // ‚úÖ N·∫øu c√≥ truy·ªÅn favorite_medicine_id, ki·ªÉm tra xem n√≥ c√≥ trong danh s√°ch y√™u th√≠ch kh√¥ng
    if (favorite_medicine_id) {
      const favoriteMedicine = await FavoriteMedicine.findOne({
        where: { medicine_id: favorite_medicine_id, user_id: user_id },
      });

      if (!favoriteMedicine) {
        return res.status(400).json({
          success: false,
          message: `Thu·ªëc (medicine_id = ${favorite_medicine_id}) ch∆∞a ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch!`,
        });
      }

      actualFavoriteMedicineId = favoriteMedicine.id;
    }

    // ‚úÖ N·∫øu c√≥ truy·ªÅn favorite_disease_id, ki·ªÉm tra xem n√≥ c√≥ trong danh s√°ch y√™u th√≠ch kh√¥ng
    if (favorite_disease_id) {
      const favoriteDisease = await FavoriteDisease.findOne({
        where: { disease_id: favorite_disease_id, user_id: user_id },
      });

      if (!favoriteDisease) {
        return res.status(400).json({
          success: false,
          message: `B·ªánh (disease_id = ${favorite_disease_id}) ch∆∞a ƒë∆∞·ª£c th√™m v√†o danh s√°ch y√™u th√≠ch!`,
        });
      }

      actualFavoriteDiseaseId = favoriteDisease.id;
    }

    // üöÄ Ki·ªÉm tra xem trong nh√£n n√†y ƒë√£ c√≥ b·ªánh ho·∫∑c thu·ªëc n√†y ch∆∞a
    const existingLabelEntry = await FavoriteLabel.findOne({
      where: {
        user_id,
        label_id,
        favorite_medicine_id: actualFavoriteMedicineId || null,
        favorite_disease_id: actualFavoriteDiseaseId || null,
      },
    });

    if (existingLabelEntry) {
      return res.status(400).json({
        success: false,
        message: "Thu·ªëc ho·∫∑c b·ªánh n√†y ƒë√£ c√≥ trong nh√£n!",
      });
    }

    // ‚úÖ G√°n nh√£n m·ªõi (th√™m b·∫£n ghi m·ªõi)
    const newFavoriteLabel = await FavoriteLabel.create({
      user_id,
      label_id,
      favorite_disease_id: actualFavoriteDiseaseId || null,
      favorite_medicine_id: actualFavoriteMedicineId || null,
    });

    return res.status(201).json({
      success: true,
      message: "G√°n nh√£n th√†nh c√¥ng",
      data: newFavoriteLabel,
    });
  } catch (err) {
    console.error("‚ùå L·ªñI khi g√°n nh√£n:", err.message, err.stack);
    return res.status(500).json({
      success: false,
      message: "L·ªói khi g√°n nh√£n",
      error: err.message,
    });
  }
};


// l·∫•y danh s√°ch nh√£n g√°n v·ªõi thu·ªëc ho·∫∑c b·ªánh 
const getLabelDetails = async (req, res) => {
  const { user_id } = req.query;

  if (!user_id) {
    return res.status(400).json({ success: false, message: "Thi·∫øu user_id" });
  }

  try {
    // Thay ƒë·ªïi c√°ch query ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ FavoriteLabel
    const favoriteLabels = await FavoriteLabel.findAll({
      where: { user_id },
      include: [
        {
          model: Label,
          attributes: ['name', 'color']
        },
        {
          model: FavoriteMedicine,
          as: 'Favorite_Medicine',
          include: [{
            model: Medicine,
            attributes: ['id', 'ten_thuoc']
          }]
        },
        {
          model: FavoriteDisease,
          // as: 'Favorite_Disease',
          include: [{
            model: Disease,
            attributes: ['id', 'ten_benh']
          }]
        }
      ]
    });


    const labelDetails = favoriteLabels.map(favLabel => ({
      labelName: favLabel.Label.name,
      labelColor: favLabel.Label.color,
      favoriteMedicine: favLabel.Favorite_Medicine ? {
        medicineName: favLabel.Favorite_Medicine.Medicine.ten_thuoc,  
        medicineId: favLabel.Favorite_Medicine.Medicine.id
      } : null,
      favoriteDisease: favLabel.FavoriteDisease ? {
        diseaseName: favLabel.FavoriteDisease.Disease.ten_benh,  
        diseaseId: favLabel.FavoriteDisease.Disease.id
      } : null
    }));

    // Log ƒë·ªÉ debug
    console.log('Raw data:', JSON.stringify(favoriteLabels, null, 2));
    console.log('Formatted data:', JSON.stringify(labelDetails, null, 2));

    res.status(200).json({ 
      success: true, 
      data: labelDetails 
    });
  } catch (err) {
    console.error("L·ªói khi l·∫•y danh s√°ch nh√£n chi ti·∫øt:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói khi l·∫•y danh s√°ch nh√£n chi ti·∫øt",
      error: err.message
    });
  }
};




module.exports = {
  createLabel,
  getLabels,
  updateLabel,
  deleteLabel,
  assignLabel,
  getLabelDetails,
};
